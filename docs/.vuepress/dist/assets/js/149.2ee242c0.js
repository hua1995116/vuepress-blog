(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{537:function(n,e,t){"use strict";t.r(e);var o=t(44),l=Object(o.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"图解webpack-二-es-modules-和-code-splitting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图解webpack-二-es-modules-和-code-splitting"}},[n._v("#")]),n._v(" 图解webpack(二) —— ES Modules 和 Code Splitting")]),n._v(" "),t("p",[n._v("先讲原理再将实践\n会异步请求一个额外的 js")]),n._v(" "),t("p",[n._v("分析 code splitting 后的 chunk 代码")]),n._v(" "),t("p",[n._v("模块是如何注册的？")]),n._v(" "),t("p",[n._v("需要注意的是，如果这个模块之前注册了，那么将不进行打包。")]),n._v(" "),t("p",[n._v("----module\n----module\n-----module")]),n._v(" "),t("p",[n._v("你可以理解为两段同步的代码")]),n._v(" "),t("p",[n._v("但是要考虑到网络等因素，模块的注册并不是一定成功的。只有模块注册成功了，才能正常使用")]),n._v(" "),t("p",[n._v("上一讲中我们讲到了 webpack 的 CommonJS 的打包模式，CommonJS 的形态也是一种非常简单的模式，如果你还不熟悉，请先看上一讲。\n今天我们来讲一讲 ES Modules 的打包方式 以及 Code Splitting 的原理，讲完原理后，我们再来继续完善我们的 tiny-webpack ，希望能够一步步完善，做一个五脏俱全的 tiny-webpack 。")]),n._v(" "),t("p",[n._v("ES Modules\nAST\n@babel/parser\n@babel/traverse\n@babel/core\nbabel 套餐\nCode Splitting\nJSONP\nJS")]),n._v(" "),t("p",[n._v("ES Modules 的方式与 CommonJS 的主题思路都是差不多的。")]),n._v(" "),t("p",[n._v("解析文件\n寻找子依赖\n解析文件\n结束\n构建树\n|\n扁平数组\n|\nchunk\n|\nbundle")])])}),[],!1,null,null,null);e.default=l.exports}}]);