(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{482:function(t,a,s){"use strict";s.r(a);var e=s(44),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"实现一个-websocket-框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现一个-websocket-框架"}},[t._v("#")]),t._v(" 实现一个 websocket 框架")]),t._v(" "),s("p",[t._v("项目地址: https://github.com/hua1995116/websocket-ws")]),t._v(" "),s("h2",{attrs:{id:"前置知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前置知识"}},[t._v("#")]),t._v(" 前置知识")]),t._v(" "),s("p",[t._v("1 kb = 1024 byte")]),t._v(" "),s("p",[t._v("1 byte = 8 bit")]),t._v(" "),s("h2",{attrs:{id:"websocket-数据帧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#websocket-数据帧"}},[t._v("#")]),t._v(" websocket 数据帧")]),t._v(" "),s("p",[t._v("前面已经说过了WebSocket在客户端与服务端的“Hand-Shaking”实现，所以这里讲数据传输。\nWebSocket传输的数据都是以Frame（帧）的形式实现的，就像TCP/UDP协议中的报文段Segment。下面就是一个Frame：（以bit为单位表示）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("  0                   1                   2                   3\n  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n +-+-+-+-+-------+-+-------------+-------------------------------+\n |F|R|R|R| opcode|M| Payload len |    Extended payload length    |\n |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |\n |N|V|V|V|       |S|             |   (if payload len==126/127)   |\n | |1|2|3|       |K|             |                               |\n +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\n |     Extended payload length continued, if payload len == 127  |\n + - - - - - - - - - - - - - - - +-------------------------------+\n |                               |Masking-key, if MASK set to 1  |\n +-------------------------------+-------------------------------+\n | Masking-key (continued)       |          Payload Data         |\n +-------------------------------- - - - - - - - - - - - - - - - +\n :                     Payload Data continued ...                :\n + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n |                     Payload Data continued ...                |\n +---------------------------------------------------------------+\n")])])]),s("h3",{attrs:{id:"fin-1bit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fin-1bit"}},[t._v("#")]),t._v(" FIN： 1bit")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("表示此帧是否是消息的最后帧。第一帧也可能是最后帧。\n")])])]),s("h3",{attrs:{id:"rsv1-rsv2-rsv3-各1bit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rsv1-rsv2-rsv3-各1bit"}},[t._v("#")]),t._v(" RSV1，RSV2，RSV3： 各1bit")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("必须是0，除非协商了扩展定义了非0的意义。如果接收到非0，且没有协商扩展定义  此值的意义，接收端必须使WebSocket连接失败。\n")])])]),s("h3",{attrs:{id:"opcode-4bit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#opcode-4bit"}},[t._v("#")]),t._v(" Opcode： 4bit")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('定义了"Payloaddata"的解释。如果接收到未知的操作码，接收端必须使WebSocket       连接失败。下面的值是定义了的。\n\n%x0 表示一个后续帧\n\n%x1 表示一个文本帧\n\n%x2 表示一个二进制帧\n\n%x3-7 为以后的非控制帧保留\n\n%x8 表示一个连接关闭\n\n%x9 表示一个ping\n\n%xA 表示一个pong\n\n%xB-F 为以后的控制帧保留\n')])])]),s("h3",{attrs:{id:"mask-1bit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mask-1bit"}},[t._v("#")]),t._v(" Mask： 1bit")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('定义了"Payload data"是否标记了。如果设为1，必须有标记键出现在masking-key，用   来unmask "payload data"，见5.3节。所有从客户端发往服务器的帧必须把此位设为1。\n')])])]),s("h3",{attrs:{id:"payload-length-7bit-7-16bit-7-64bit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#payload-length-7bit-7-16bit-7-64bit"}},[t._v("#")]),t._v(" Payload length： 7bit, 7 + 16bit, 7 + 64bit")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('"Payloaddata"的长度，字节单位。如果值是0-125，则是有效载荷长度。如果是126，   接下来的2字节解释为16位无符号整数，作为有效载荷长度。如果127，接下来的8  字节解释为64位无符号整数（最高位必须是0），作为有效载荷长度。多字节长度数值    以网络字节序表示。注意，在任何情况下，必须用最小数量的字节来编码长度，例如，       124字节 长的字符串不能编码为序列126, 0, 124。有效载荷长度是"Extension data"的长     度加上"Application data"的长度。"Extension data"的长度可能是0，在这种情况下，    有效载荷长度是"Applicationdata"的长度。\n')])])]),s("h3",{attrs:{id:"masking-key-0或4字节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#masking-key-0或4字节"}},[t._v("#")]),t._v(" Masking-key：0或4字节")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("所有从客户端发往服务器的帧必须用32位值标记，此值在帧里。如果mask位设为1， 此字段（32位值）出现，否则缺失。更多的信息在5.3节，客户端到服务器标记。\n")])])]),s("h3",{attrs:{id:"payload-data-x-y-字节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#payload-data-x-y-字节"}},[t._v("#")]),t._v(" Payload data： (x + y)字节")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('"Payloaddata" 定义为"extensiondata" 后接"application data"。\n')])])]),s("h3",{attrs:{id:"extension-data-x-字节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#extension-data-x-字节"}},[t._v("#")]),t._v(" Extension data： x 字节")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('"Extensiondata"是0字节，除非协商了扩张。所有扩张必须指定"extensiondata"的长度，      或者如何计算长度，如何使用扩展必须在打开握手时进行协商。如果有，"Extension data"包括在有效载荷长度。\n')])])]),s("h3",{attrs:{id:"application-data-y字节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#application-data-y字节"}},[t._v("#")]),t._v(" Application data： y字节")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('任意"Applicationdata"占据了帧的剩余部分，在"Extensiondata"之后。 "Applicationdata"的长度等于有效载荷长度减去"Extensiondata"的长度。\n')])])]),s("p",[s("strong",[t._v("示意图")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s3.qiufengh.com/blog/ws.png",alt:"ws.png"}})]),t._v(" "),s("h2",{attrs:{id:"parse"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parse"}},[t._v("#")]),t._v(" parse")]),t._v(" "),s("p",[t._v("因为 JavaScript 语言没有用于读取或操作二进制数据流的机制，而是用 buffer 来进行代替操作。")]),t._v(" "),s("h3",{attrs:{id:"第一个字节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一个字节"}},[t._v("#")]),t._v(" 第一个字节")]),t._v(" "),s("p",[t._v("首先我们先来解析出前 8 个字节。占比情况如下(单位 bit)：")]),t._v(" "),s("p",[t._v("FIN(1)，RSV1(1)，RSV2(1)，RSV3(1)，Opcode(4)")]),t._v(" "),s("p",[t._v("我们先来获取出 buffer 中的第一个字节，buffer 可以理解为一个类似的数组，每一个值代表一个字节，并且以16进制存储。而一个字节等于八个bit。")]),t._v(" "),s("p",[t._v("例如读出第一个 buffer 值为 7b, 如果将他转化为 10 进制为 123, 转化为2进制为 01111011, 因此我们肉眼可以看出, FIN = 0, RSV1 = 1, RSV2 = 1, RSV3 = 1, Opcode = 1011 (2进制表示)")]),t._v(" "),s("p",[t._v("但是我们在代码中无法使用这样的方式来查看，因此我们需要用到位移(>>)符号和按位与(&)符号。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("r_queue "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// buffer  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FIN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" r_queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" Opcode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" r_queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0F")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("0x0F 转化为 2 进制为 "),s("code",[t._v("00001111")]),t._v("，获取后4位。")]),t._v(" "),s("h3",{attrs:{id:"第二个字节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二个字节"}},[t._v("#")]),t._v(" 第二个字节")]),t._v(" "),s("p",[t._v("有了上面的描述相信你对如何解析数据有了初步的了解, 继续来解析第二个字节, 占比情况(单位 bit ):")]),t._v(" "),s("p",[t._v("Mask(1), Payload length(7)")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("r_queue "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// buffer  ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MASK")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" r_queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" Payload_len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" r_queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x7F")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("0x7F 转化为 2 进制为 "),s("code",[t._v("01111111")]),t._v(", 用来获取后7位。")]),t._v(" "),s("p",[t._v("如果 Payload_len 为 125， 则 Payload_len 长度就到此为止，如果Payload_len 为 126， 则后面的 2个字节 来代表长度， 可取范围为 0 - 65535。 如果Payload_len 为 127，则后面 8个字节 用来标识长度，可取范围为 0 - 2 ^ 64 -1  (1kb = 2 ^ 13 bit), 可以想象这个数值还是非常大的，基本可以认为 websocket 的存储数据量基本上没什么限制。")]),t._v(" "),s("p",[s("strong",[t._v("总结")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Payload_len = 125， Payload_len = 4bit\nPayload_len = 126， Payload_len = 4 + 16 bit\nPayload_len = 125， Payload_len = 4 + 64 4bit\n")])])]),s("h3",{attrs:{id:"第三部分-因为可能前面-payload-len-会占据额外的2个字节或者8个字节-所以称第三部分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三部分-因为可能前面-payload-len-会占据额外的2个字节或者8个字节-所以称第三部分"}},[t._v("#")]),t._v(" 第三部分（因为可能前面 Payload_len 会占据额外的2个字节或者8个字节，所以称第三部分）")]),t._v(" "),s("p",[t._v("Masking-key(0/4 字节)")]),t._v(" "),s("p",[t._v("如果前面获取的 mask = 1， 则在 Payload_len 后会额外占据 4个字节。")]),t._v(" "),s("p",[t._v("Payload data\n情况1:\nmask = 0，直接将获取剩余的buffer，转化为 string，即为我们传输的数据。\n情况2：\nmask = 1， 需要根据以下公式来进行额外计算。\nhttps://tools.ietf.org/html/rfc6455#page-32")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('Octet i of the transformed data ("transformed-octet-i") is the XOR of\noctet i of the original data ("original-octet-i") with octet at index\ni modulo 4 of the masking key ("masking-key-octet-j"):\n\n    j                   = i MOD 4\n    transformed-octet-i = original-octet-i XOR masking-key-octet-j\n\nThe payload length, indicated in the framing as frame-payload-length,\ndoes NOT include the length of the masking key.  It is the length of\nthe "Payload data", e.g., the number of bytes following the masking\nkey.\n')])])]),s("p",[t._v("公式："),s("code",[t._v("当前字节[i]的实际值 = 当前数据[i] ^(异或) masking-key[j] (j = i % 4)")])]),t._v(" "),s("h2",{attrs:{id:"generate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generate"}},[t._v("#")]),t._v(" generate")]),t._v(" "),s("p",[t._v("有了解析的过程，生成的过程就非常简单了。下面只考虑最简单的情况。不考虑掩码的情况, 只考虑长度小于 125， 126 的情况。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" json "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取 buffer 长度")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" jsonByteLength "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("byteLength")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断长度")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" lengthByteCount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jsonByteLength "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("126")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" payloadLength "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lengthByteCount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" jsonByteLength "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("126")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造 buffer 长度 =  前面两个字节 + 后面的第三部分")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" buffer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" lengthByteCount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" jsonByteLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写入第一个字节")]),t._v("\nbuffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeUInt8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b10000001")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写入第二个字节")]),t._v("\nbuffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeUInt8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("payloadLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" payloadOffset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果长度大于 126")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lengthByteCount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 偏移 2个字节写入")]),t._v("\n    buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeUInt16BE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jsonByteLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    payloadOffset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" lengthByteCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写入数据")]),t._v("\nbuffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("json"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" payloadOffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),s("h2",{attrs:{id:"工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工具"}},[t._v("#")]),t._v(" 工具")]),t._v(" "),s("ol",[s("li",[t._v("进制转化工具 https://tool.lu/hexconvert/")]),t._v(" "),s("li",[t._v("js 进制转化 num.toStrong(2); (十进制转二进制)， parseInt(stringNum, 2); (二进制转十进制)")]),t._v(" "),s("li",[t._v("js 数字范围 -(2 ** 53 - 1) ~ (2 ** 53 -1)")]),t._v(" "),s("li",[t._v("websocket 规范 https://tools.ietf.org/html/rfc6455#page-32")])]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ol",[s("li",[t._v("https://github.com/abbshr/RocketEngine")]),t._v(" "),s("li",[t._v("https://hackernoon.com/implementing-a-websocket-server-with-node-js-d9b78ec5ffa8")])])])}),[],!1,null,null,null);a.default=n.exports}}]);