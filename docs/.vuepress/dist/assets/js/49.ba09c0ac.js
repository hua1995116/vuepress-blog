(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{436:function(t,a,s){"use strict";s.r(a);var e=s(44),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"🔱-几个你不知道的git小命令-收获快乐。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🔱-几个你不知道的git小命令-收获快乐。"}},[t._v("#")]),t._v(" 🔱 几个你不知道的Git小命令,收获快乐。")]),t._v(" "),s("p",[t._v("本文是对原文的翻译+并在原文基础上自我实践，进行了大量的补充。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://dev.to/dephraiim/git-commands-you-probably-didn-t-know-3bcm?utm_source=digest_mailer&utm_medium=email&utm_campaign=digest_email",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git Commands You Didn't Know"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("关于 Git, 我最喜欢的它的原因之一就是它既简单又可自定义，"),s("code",[t._v("alias")]),t._v(" 功能就是其中的代表。 Git 支持"),s("code",[t._v("alias")]),t._v("，这意味着你可以给命令自定义名字。 当然，我更喜欢为很长的命令设置别名("),s("code",[t._v("alias")]),t._v(")，避免每次需要他们的时候，我要花时间去搜索它们。")]),t._v(" "),s("blockquote",[s("p",[t._v("别名(alias)最好设置成你最习惯的语义化方式，毕竟工具只是工具，是帮助我们提高效率的，打一长串命令，没有必要。 😃")])]),t._v(" "),s("p",[t._v("Git中的别名(alias)配置规则是这样的。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("new_alias"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[previous_git_command]"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Example")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias.save commit\n")])])]),s("p",[t._v("从上面的示例中，我将不再需要 git commit，我更习惯用 git save。")]),t._v(" "),s("p",[t._v("如果命令是多个，则需要用引号包住多个选项。")]),t._v(" "),s("h2",{attrs:{id:"git-recommit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-recommit"}},[t._v("#")]),t._v(" "),s("code",[t._v("git recommit")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias.recommit "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'commit --amend -m'")]),t._v("\n")])])]),s("p",[s("code",[t._v("git commit --amend")]),t._v(" 允许你更改最后的提交信息("),s("code",[t._v("message")]),t._v(")。 "),s("code",[t._v("recommit")]),t._v("命令让提交变得更简单，更容易记住。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Change the last commit message with recommit")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" recommit "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"New commit message"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [master 64175390] New commit message")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  Date: Tue Sep 22 15:09:11 2020 +0000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  1 file changed, 2 insertions(+)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  create mode 100644 vue.js")]),t._v("\n")])])]),s("h2",{attrs:{id:"git-commend"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-commend"}},[t._v("#")]),t._v(" "),s("code",[t._v("git commend")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias.commend "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'commit --amend --no-edit'")]),t._v("\n")])])]),s("p",[t._v("使用"),s("code",[t._v("--no-edit")]),t._v("标志进行修改，可以在最近一次提交时在仓库中提交新的更改，你不需要再次重复提交消息。")]),t._v(" "),s("p",[s("strong",[t._v("我来解释一下这个命令")]),t._v("，你是否有这种经历，写完代码了 "),s("code",[t._v("git add .")]),t._v(" 、 "),s("code",[t._v("git commit xxx")]),t._v(" ，一顿操作，刚想"),s("code",[t._v("push")]),t._v(" 的时候发现 有个文件漏改了，又是 "),s("code",[t._v("git add .")]),t._v(" 、 "),s("code",[t._v("git commit xxx")]),t._v(" 一顿操作，此时 "),s("code",[t._v("commit")]),t._v(" 就会有两次记录，这对于项目来说是非常不好的，一次 "),s("code",[t._v("commit")]),t._v(" 被分成了两次，如果遇到需要"),s("code",[t._v("revert")]),t._v(" 你就傻眼了。这个时候你就可以用这个命令轻松解决。")]),t._v(" "),s("p",[s("strong",[t._v("代码演示")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("echo 'Hello world' > README.md\ngit add .\ngit commit -m \"Hello Word\"\ngit log --oneline\n4b39c8a (HEAD -> master) Add README.md\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("echo 'Hello 秋风' >> README.md\ngit commend\ngit log --oneline \n60c5190 (HEAD -> master) Add README.md\n")])])]),s("p",[t._v("此时"),s("code",[t._v("git log")]),t._v("依然只有一次记录。")]),t._v(" "),s("h2",{attrs:{id:"git-search"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-search"}},[t._v("#")]),t._v(" "),s("code",[t._v("git search")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias.search "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'grep'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Example")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" search "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("search_term"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[s("code",[t._v("git grep")]),t._v("允许你在存储库中搜索关键字(且支持正则)，并返回各种匹配项。 这很酷，但是我不知道 "),s("code",[t._v("grep")]),t._v(" 的意思，请告诉我是否这样做。 我更喜欢"),s("code",[t._v("search")]),t._v("，它易于记住并且易于使用。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git search createHotContext\n")])])]),s("p",[s("img",{attrs:{src:"https://s3.qiufeng.blue/blog/image-20201001204951416.png",alt:"image-20201001204951416"}})]),t._v(" "),s("h2",{attrs:{id:"git-here"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-here"}},[t._v("#")]),t._v(" "),s("code",[t._v("git here")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git config --global alias.here '!git init && git add . && git commit -m \"init 🦄\"'\n")])])]),s("p",[t._v("通常，当我初始化一个新的仓库时，我将暂存所有文件，并使用初始提交消息进行提交。 我使用"),s("code",[t._v("git here")]),t._v("一步就完成了（这对于开源工具重度爱好者，真的是福星，太爽了，谁用谁知道）。 只需在要创建新仓库的文件夹中运行它，就可以了。")]),t._v(" "),s("blockquote",[s("p",[t._v("小技巧: 像我在公司开发代码需要提交到公司的私有仓库，因此全局配置了公司的 username 和 email，当我切换到开源项目的时候，老是会忘记修改回来，因此我会创建一个 "),s("code",[t._v("git config user.name xxx \\n git config user.email xxx@xx.com")]),t._v(" 的一个 sh文件。因此我初始化的时候可以这样 。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git config --global alias.here '!git init && sh ~/my/git.sh && git add . && git commit -m \"init 🦄\"'\n")])])]),s("p",[t._v("这样子，既可以提交到私有仓库，创建开源项目的时候又不耽误。")]),t._v(" "),s("p",[t._v("也有人说，我不改也能提交啊，=。= 为啥要改？那是你不知道强迫症....看到这种灰色头像的提交真的是心里焦灼。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s3.qiufeng.blue/blog/image-20201001210508185.png",alt:"image-20201001210508185"}})]),t._v(" "),s("h2",{attrs:{id:"git-who"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-who"}},[t._v("#")]),t._v(" "),s("code",[t._v("git who")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias.who "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'blame'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Example")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("who")]),t._v(" index.ts\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 641753902 (Ephraim Atta-Duncan 2020-09-22 15:09:11 +0000 1)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 641753902 (Ephraim Atta-Duncan 2020-09-22 15:09:11 +0000 2) console.log("who?") ')]),t._v("\n\n")])])]),s("p",[s("code",[t._v("git blame")]),t._v(" 用于逐行检查文件的内容，并查看每行的最后修改时间以及修改的作者。 如果有错误，你可以追溯到某一行的改动是谁修改的。vscode 插件 "),s("code",[t._v("GitLens")]),t._v("也是基于此原理。")]),t._v(" "),s("blockquote",[s("p",[t._v("总结: 追踪 bug 小能手，以后谁写出bug，轻松定位某一行是谁写的。")])]),t._v(" "),s("h2",{attrs:{id:"git-zip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-zip"}},[t._v("#")]),t._v(" "),s("code",[t._v("git zip")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias.zip "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'archive --format=tar.gz -o repo.tar.gz'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Example")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("zip")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("使用 "),s("code",[t._v("archive")]),t._v("命令可以创建整个或部分仓库的 "),s("code",[t._v("tarball")]),t._v(" 和"),s("code",[t._v("zip")]),t._v("。 "),s("code",[t._v("git zip")]),t._v(" 更容易记住。 只需添加分支名称。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("➜  git-test2 git:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nREADME.md\n➜  git-test2 git:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("zip")]),t._v(" master\n➜  git-test2 git:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ✗ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nREADME.md   repo.tar.gz\n")])])]),s("h2",{attrs:{id:"git-newbie"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-newbie"}},[t._v("#")]),t._v(" "),s("code",[t._v("git newbie")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias.newbie "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'checkout --orphan'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Example")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" newbie "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("new_branch_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("带有"),s("code",[t._v("--orphan")]),t._v(" 标志的"),s("code",[t._v("git checkout")]),t._v("允许您创建一个分支，而没有来自父分支的任何历史记录。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("➜  git-test2 git:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" newbie pages\nSwitched to a new branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pages'")]),t._v("\n➜  git-test2 git:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ✗ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nREADME.md\n➜  git-test2 git:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ✗ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\nfatal: your current branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pages'")]),t._v(" does not have any commits yet\n➜  git-test2 git:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ✗\n")])])]),s("p",[s("strong",[t._v("实践")])]),t._v(" "),s("p",[t._v("那么它的应用场景是什么呢?")]),t._v(" "),s("p",[t._v("还记得"),s("code",[t._v("github pages")]),t._v(" 吗？利用他能快速创建站点，可以用某个分支来当做站点展示，但是如果我们把源码和打包后的文件都放在一个分支，就会显得累赘与混乱，这个时候我们就可以利用这个特性来创建一个全新无 "),s("code",[t._v("commit")]),t._v(" 的分支。两个工程（一个源文件工程，一个打包后的工程）放到同一个仓库(repo)中。")]),t._v(" "),s("p",[s("strong",[t._v("代码演示")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("➜  git-test2 git:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" newbie pages\nSwitched to a new branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pages'")]),t._v("\n➜  git-test2 git:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ✗ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nREADME.md\n➜  git-test2 git:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ✗ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\nfatal: your current branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pages'")]),t._v(" does not have any commits yet\n➜  git-test2 git:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ✗ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" st\nOn branch pages\n\nNo commits yet\n\nChanges to be committed:\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git rm --cached <file>..."')]),t._v(" to unstage"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\tnew file:   README.md\n\n➜  git-test2 git:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ✗\n")])])]),s("h2",{attrs:{id:"git-clonely"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-clonely"}},[t._v("#")]),t._v(" "),s("code",[t._v("git clonely")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git config --global alias.clonely 'clone --single-branch --branch'\n\n# Example\ngit clonely [branch_name] [remote_url]\n\ngit clonely v3 https://github.com/vuejs/vue-apollo\n# Cloning into 'vue-apollo'...\n# remote: Enumerating objects: 2841, done.\n# remote: Total 2841 (delta 0), reused 0 (delta 0), pack-reused 2841\n# Receiving objects: 100% (2841/2841), 1.92 MiB | 330.00 KiB/s, done.\n# Resolving deltas: 100% (1743/1743), done.\n")])])]),s("p",[t._v("带有"),s("code",[t._v("--single-branch --branch")]),t._v("标志的"),s("code",[t._v("git clone")]),t._v("允许你从存储库中"),s("code",[t._v("clone")]),t._v("特定分支，毫不夸张的说，这个命令我在 Google 中搜索了10多次。 别名（alias）更好用，更好记忆~")]),t._v(" "),s("p",[s("strong",[t._v("能干嘛呢？")])]),t._v(" "),s("p",[t._v("当然是减少"),s("code",[t._v("clone")]),t._v("时间，这对大仓库而言简直是福星。")]),t._v(" "),s("h2",{attrs:{id:"git-plg"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-plg"}},[t._v("#")]),t._v(" "),s("code",[t._v("git plg")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias.plg "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"log --graph --pretty=format:'%C(yellow)%h%Creset -%Cred%d%Creset %s %Cgreen| %cr %C(bold blue)| %an%Creset' --abbrev-commit --date=relative\"")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Example")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" plg "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# plg - Pretty Log")]),t._v("\n\n")])])]),s("p",[s("code",[t._v("git log")]),t._v("没什么问题，除了它有点丑陋，没有颜色差异，如果要自定义它，我们需要在 google 上查询相关的命令。 幸运的是，我们有别名(alias)。 使用该命令的别名，你将获得非常漂亮的日志。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s3.qiufeng.blue/blog/image-20201001223111514.png",alt:"image-20201001223111514"}})]),t._v(" "),s("h2",{attrs:{id:"git-fresh"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-fresh"}},[t._v("#")]),t._v(" "),s("code",[t._v("git fresh")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('git config --global alias.fresh "filter-branch --prune-empty --subdirectory-filter"\n\n# Example\ngit fresh [subfolder] [branch_name]\ngit fresh src main # Don\'t do this unless you know what you are doing\n')])])]),s("p",[t._v("通过一系列参数，使用"),s("code",[t._v("fresh")]),t._v("命令用于从子文件夹中创建新的存储库。 带有多个参数的 "),s("code",[t._v("filter-branch")]),t._v("获取指定子文件夹的内容，并将其中的内容替换为该子文件夹的内容。")]),t._v(" "),s("p",[s("strong",[t._v("实践")])]),t._v(" "),s("p",[t._v("假设有这样一个项目，目录结构如下")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(".\n├── script\n│   └── index.js\n├── README.md\n")])])]),s("p",[t._v("如果我们需要改造项目，将 "),s("code",[t._v("script")]),t._v(" 作为单独的项目， 这个时候我们需要将 "),s("code",[t._v("script")]),t._v(" 拆出来，我们一般会通过拷贝来解决，这样做没有什么问题，但是你将丢失"),s("code",[t._v("script")]),t._v("目录以及子文件所有历史修改记录。")]),t._v(" "),s("p",[t._v("现在我们成功将 "),s("code",[t._v("script")]),t._v(" 目录拆成了单独的项目。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s3.qiufeng.blue/blog/image-20201001224453823.png?imageView2/0/q/75%7Cwatermark/1/image/aHR0cHM6Ly9zMy5xaXVmZW5naC5jb20vd2F0ZXJtYXJrL3dhdGVybWFyay5wbmc=/dissolve/50/gravity/SouthEast/dx/0/dy/0",alt:"image-20201001224453823"}})]),t._v(" "),s("p",[t._v("再来看 "),s("code",[t._v("commit")]),t._v(" 记录，依旧保留了"),s("code",[t._v("script")]),t._v(" 的相关"),s("code",[t._v("commit")]),t._v("记录，对于管理项目来说非常有帮助。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("commit 8b311558195684d6420baedce74e0f9951208038 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nAuthor: qiufeng "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("qiufeng@163.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Thu Oct "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(":37:21 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v(" +0800\n\n    feat: script\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("END"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("如果我们不小心拆分错了，还可以进行还原。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git reset --hard refs/original/refs/heads/{branch_name}\n")])])]),s("p",[s("img",{attrs:{src:"https://s3.qiufeng.blue/blog/image-20201001224735002.png?imageView2/0/q/75%7Cwatermark/1/image/aHR0cHM6Ly9zMy5xaXVmZW5naC5jb20vd2F0ZXJtYXJrL3dhdGVybWFyay5wbmc=/dissolve/50/gravity/SouthEast/dx/0/dy/0",alt:"image-20201001224735002"}})]),t._v(" "),s("p",[t._v("还可以继续拆分,这个时候拆分需要先清除一下备份~")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git update-ref -d refs/original/refs/heads/master\n")])])]),s("p",[t._v("然后从头开始继续操作即可~")]),t._v(" "),s("h2",{attrs:{id:"最后"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[t._v("#")]),t._v(" 最后")]),t._v(" "),s("p",[t._v("将此添加到你的 "),s("code",[t._v(".gitconfig")]),t._v(" 文件。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[alias]\n    recommit = commit --amend -m\n    commend = commit --amend --no-edit\n    here = !git init && git add . && git commit -m \\\"Initialized a new repository\\\"\n    search = grep\n    who = blame\n    zip = archive --format=tar.gz -o ../repo.tar.gz\n    lonely = clone --single-branch --branch\n    plg = log --graph --pretty=format:'%C(yellow)%h%Creset -%Cred%d%Creset %s %Cgreen| %cr %C(bold blue)| %an%Creset' --abbrev-commit --date=relative\n    fresh = filter-branch --prune-empty --subdirectory-filter\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);