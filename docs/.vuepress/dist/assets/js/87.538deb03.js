(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{473:function(t,n,s){"use strict";s.r(n);var a=s(44),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"node-napi-实现-c-扩展-lru-淘汰算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-napi-实现-c-扩展-lru-淘汰算法"}},[t._v("#")]),t._v(" Node + NAPI 实现 C++ 扩展 - LRU 淘汰算法")]),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("前段实践了一下 Node 的 C++ 编写，对于底层的编程实践是每个程序员心中所向往的圣地。由于接触的 Node C++ 的时间比较少，可能还无法完全理解其中的精髓，但是本文只记录自己的一个实践。")]),t._v(" "),s("p",[t._v("先来看看 Node Addons 在整个模块中的所处的位置。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/24/16f35abf06cbb090?w=879&h=615&f=jpeg&s=35467",alt:""}})]),t._v(" "),s("p",[t._v("Addons 是用 C ++编写的动态链接的共享对象。 require() 函数可以将 Addons 加载为普通的Node.js模块，Addons 提供 JavaScript 和 C / C ++ 库之间的接口。")]),t._v(" "),s("h2",{attrs:{id:"插件编写方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插件编写方式"}},[t._v("#")]),t._v(" 插件编写方式")]),t._v(" "),s("p",[t._v("在现代，Node 官方推荐的方式为以下三种, 插件编写历史可以查看 "),s("a",{attrs:{href:"https://cnodejs.org/topic/5957626dacfce9295ba072e0",target:"_blank",rel:"noopener noreferrer"}},[t._v("《"),s("strong",[t._v("从暴力到 NAN 再到 NAPI——Node.js 原生模块开发方式变迁")]),t._v("》"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[s("p",[t._v("1.NAN (一个充满宏和实用工具的头文件，使Node.js的插件开发在0.8、0.10、0.12、1、2、3、4、5、6、7、8、9、10、11、12和13版本之间更容易。)")])]),t._v(" "),s("li",[s("p",[t._v("2.NAPI   (N-API（在字母中发音为N，后跟API）是用于构建本机插件的API。 它独立于底层JavaScript运行时（例如V8），并作为Node.js本身的一部分进行维护。)")])]),t._v(" "),s("li",[s("p",[t._v("3.直接使用内部的 V8、Libuv 和 Node.js库（需要掌握 V8,  libuv, Node 原生库方法，Node.js包括其他静态链接的库，包括OpenSSL ）")])])]),t._v(" "),s("p",[t._v("如果你不使用 NAPI 的未公开的 API，优先使用 NAPI 进行插件开发。")]),t._v(" "),s("p",[s("strong",[t._v("NAN 和 NAPI 的区别")])]),t._v(" "),s("p",[t._v("NAN 解决了混乱的C++原生模块，不再让一个模块只能被若干个 Node 版本使用，而提出使用宏定义来解决这个问题，所以说NAN是一大堆宏定义，兼容各种 Node 版本的宏定义。做到了"),s("code",[t._v("一次编写，到处编译")]),t._v("。")]),t._v(" "),s("p",[t._v("而这种设计模式还是依然有缺点，那就是多次编译，也就是说你写的插件如果到了更高的 Node 版本，还是需要再次编译，因此有来额 NAPI，它旨在使 Addons 与基础 JavaScript 引擎的更改保持隔离，并使为一个主要版本编译的模块可以在 Node 的更高主要版本上运行，而"),s("code",[t._v("无需重新编译")]),t._v("。")]),t._v(" "),s("p",[t._v("随着时代的前进，我当然选择了最新的 NAPI 进行实践，虽然最新的 API 的封装地非常友好，看起来编写已经不是那么复杂，但是对于深入理解V8 以及Node原生模块来说，提升没有从更下层编写来的大。不过，这也不妨碍我们的学习，我们先来看看上层的实践，快速搭建应用，然后慢慢地去理解整个过程，也是一个非常好的方式。")]),t._v(" "),s("p",[t._v("还有一点就是，N-API是一个 C API，确保 "),s("a",{attrs:{href:"https://nodejs.org/en/docs/guides/abi-stability/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ABI"),s("OutboundLink")],1),t._v(" 跨Node.js版本和不同编译器级别的稳定性。C++ API更容易使用。为了支持使用 C++，该项目维护了一个名为 "),s("a",{attrs:{href:"https://github.com/nodejs/node-addon-api",target:"_blank",rel:"noopener noreferrer"}},[t._v("node-addon-api"),s("OutboundLink")],1),t._v(" 的 C++ 包装器模块。因此我们会使用进行包装后的 "),s("code",[t._v("node-addon-api")]),t._v(" 来进行开发。")]),t._v(" "),s("p",[s("strong",[t._v("本文使用的环境")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("> g++ --verison\nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/c++/4.2.1\nApple LLVM version 10.0.0 (clang-1000.11.45.5)\nTarget: x86_64-apple-darwin18.0.0\nThread model: posix\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n\n> node -v\nv10.16.0\n\n> sw_vers\nProductName:\tMac OS X\nProductVersion:\t10.14\nProductName:\tMac OS X\nProductVersion:\t10.14\nBuildVersion:\t18A391\n")])])]),s("h2",{attrs:{id:"lru算法介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lru算法介绍"}},[t._v("#")]),t._v(" LRU算法介绍")]),t._v(" "),s("p",[t._v("既然要实现一个 LRU，那必须对这个算法有一个初步的了解。LRU(Least Recently Used 意思为 "),s("strong",[t._v("最近最少使用")]),t._v(")")]),t._v(" "),s("p",[t._v("以内存访问为例解释缓存的工作原理。假设缓存的大小固定，初始状态为空。每发生一次读内存操作，首先查找待读取的数据是否存在于缓存中，若是，则缓存命中，返回数据；若否，则缓存未命中，从内存中读取数据，并把该数据添加到缓存中。向缓存添加数据时，如果缓存已满，则需要删除访问时间最早的那条数据，这种更新缓存的方法就叫做LRU。")]),t._v(" "),s("p",[t._v("可以用以下图来进行演示说明，假设我们最多只能开3个应用，第一次我们开了知乎，然后知乎为最近使用，第二次，我们点击了qq音乐，然后我们的qq音乐会成为最近使用的应用。最后我们又打开了美团，此时爱奇艺应用被删除，美团成为最近使用的应用。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/24/16f35ac914206c2b?w=500&h=1334&f=jpeg&s=121421",alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/24/16f35ace6aaa545a?w=500&h=1334&f=jpeg&s=127337",alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/24/16f35ad3e731808d?w=500&h=1334&f=jpeg&s=111771",alt:""}})]),t._v(" "),s("p",[t._v("为了实现 LRU，我们需要保证他的读写性能。理想状态为在 "),s("code",[t._v("O(1)")]),t._v(" 的时间内读取或者更新一条数据。通过这个现象我们可以使用 HashMap 来实现这个存储，根据键值访问可以达到 "),s("code",[t._v("O(1)")]),t._v(" 的速度。现在还差更新数据，由于我们需要确定最早的那条数据，所以我们需要遍历所有数据。")]),t._v(" "),s("p",[t._v("首先我们可以想到链表是一种有顺序的数据结构，其次由于我们被访问的数据有可能为非首尾结点，所以我们需要使用双向链表，来保证我们可以从中间任意结点修改链表。")]),t._v(" "),s("p",[t._v("现在我们确定了我们的数据结构为  HashMap + 双向链表。")]),t._v(" "),s("p",[t._v("我用图来描述一下整个过程，假设我们总长度为4。（左侧为双向链表，右侧为HashMap）")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/24/16f35ae4aae24006?w=1336&h=734&f=jpeg&s=122171",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"c-实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-实现"}},[t._v("#")]),t._v(" C++实现")]),t._v(" "),s("p",[t._v("由于一开始对 Node Addons 不太了解，因此先写了一个 c++ 版本，方便逻辑的调试。")]),t._v(" "),s("p",[s("strong",[t._v("list.h")])]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#include <stdio.h>\n#include <unordered_map>\n#include <string>\nusing namespace std;\n\nclass Node {\npublic:\n    string data;\n    Node *next;\n    Node *prev;\n    Node(string da, Node *p = NULL) {\n        this->data = da;\n        this->next = p;\n    }\n};\nclass List {\nprivate:\n    Node *head, *tail;\n    int position;\n    int count = 0;\n    int maxCount = 200;\n    unordered_map <string, string> cachemap;\npublic:\n    List() {\n        head = tail = NULL;\n    };\n    void SetMax(int da);\n    void Print();\n    void Insert (string da, string value);\n    void Delete(string da);\n    void Search(string da);\n};\n")])])]),s("p",[s("strong",[t._v("list.cpp")])]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#include <iostream>\n#include "list.hpp"\n#include <string>\n#include <unordered_map>\n\nusing namespace std;\n\nvoid List::SetMax(int da) {\n    maxCount = da;\n}\n\nvoid List::Print() {\n    Node *p = head;\n    \n    while(p != NULL) {\n        string key = p->data;\n        unordered_map<string ,string >::iterator l_it;\n        l_it = this->cachemap.find(key);\n        \n        if(l_it != this->cachemap.end()) {\n            cout << l_it->second << endl;\n        }\n        p = p->next;\n    }\n}\n\nvoid List::Delete(string da) {\n    Node *p = head, *q = head;\n    if(p == NULL) {\n        cout << "can\'t find value %d" << da << endl;\n        return;\n    }\n    string value = "";\n    while (p != NULL) {\n        if(p->data == da) {\n            value = da;\n            break;\n        }\n        q = p;\n        p = p->next;\n    }\n    if(p == NULL) {\n        cout << "del can\'t find value " << da << endl;\n    } else {\n        q->next = p->next;\n        cout << "del value " << da << endl;\n    }\n}\n\nvoid List::Insert(string da, string value) {\n    if(count >= maxCount) {\n        tail->prev->next = NULL;\n        tail = tail->prev;\n        \n        Node *p = new Node(da);\n        cachemap.insert(pair<string, string>(da, value));\n        p->next = head;\n        head->prev = p;\n        head = p;\n        head->prev = NULL;\n        \n        return;\n    }\n    if(head == NULL) {\n        head = tail = new Node(da);\n        cachemap.insert(pair<string, string>(da, value));\n        head->next = NULL;\n        head->prev = NULL;\n        tail->next = NULL;\n        tail->prev = NULL;\n    } else {\n        Node *p = new Node(da);\n        cachemap.insert(pair<string, string>(da, value));\n        head->prev = p;\n        p->next = head;\n        p->prev = NULL;\n        head = p;\n    }\n    count++;\n}\n\nvoid List::Search(string da) {\n    Node *p = head;\n    if(p == NULL) {\n        cout << "can\'t find" << endl;\n        return;\n    }\n    int count = -1;\n    int i = 0;\n    while( p!= NULL ) {\n        if(p->data == da) {\n            count = i;\n            break;\n        }\n        p = p->next;\n        i ++;\n    }\n    if(count != -1) {\n        p->prev->next = p->next;\n        if(p->next != NULL) {\n            p->next->prev = p->prev;\n        }\n        p->next = head;\n        p->prev = NULL;\n        head->prev = p;\n        head = p;\n        unordered_map<string ,string >::iterator l_it;\n        l_it = this->cachemap.find(da);\n        if(l_it == this->cachemap.end()) {\n            cout << "can\'t find key " << da << endl;\n        } else {\n            cout << "find value is " << l_it->second << endl;\n        }\n    } else {\n        cout << "can\'t find key" << da << endl;\n    }\n}\n')])])]),s("h2",{attrs:{id:"node-addons-设计实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-addons-设计实现"}},[t._v("#")]),t._v(" Node Addons 设计实现")]),t._v(" "),s("h3",{attrs:{id:"功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#功能"}},[t._v("#")]),t._v(" 功能")]),t._v(" "),s("p",[t._v("1.设置缓存长度")]),t._v(" "),s("p",[t._v("2.获取缓存长度")]),t._v(" "),s("p",[t._v("3.打印所有缓存数据")]),t._v(" "),s("p",[t._v("4.插入缓存数据")]),t._v(" "),s("p",[t._v("5.获取缓存数据")]),t._v(" "),s("h3",{attrs:{id:"项目结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目结构"}},[t._v("#")]),t._v(" 项目结构")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("├── binding.gyp      // 编译配置\n├── package.json  \n├── src\n│   ├── bingding.cc  // 声明模块导出\n│   ├── list.cc      // 主入口\n│   └── list.h       // 头文件声明\n└── index.js         // 主文件入口\n")])])]),s("h3",{attrs:{id:"步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[t._v("#")]),t._v(" 步骤")]),t._v(" "),s("h4",{attrs:{id:"初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[t._v("#")]),t._v(" 初始化")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" init -y\n")])])]),s("h4",{attrs:{id:"创建binding-gpy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建binding-gpy"}},[t._v("#")]),t._v(" 创建binding.gpy")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"targets"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"target_name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"LRU_node_addon"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"cflags!"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-fno-exceptions"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"cflags_cc!"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-fno-exceptions"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"sources"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./src/bingding.cc"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./src/list.cc"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"include_dirs"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<!@(node -p \\"require(\'node-addon-api\').include\\")"')]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      'defines'"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" 'NAPI_DISABLE_CPP_EXCEPTIONS' "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"下载依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下载依赖"}},[t._v("#")]),t._v(" "),s("strong",[t._v("下载依赖")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm i bindings node-addon-api -S\n")])])]),s("p",[t._v("注: "),s("code",[t._v("bingding")]),t._v(" 是用来引入 c++ 模块，"),s("code",[t._v("node-addon-api")]),t._v(" 是 NAPI 的 c++ 封装")]),t._v(" "),s("h4",{attrs:{id:"导出模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导出模块"}},[t._v("#")]),t._v(" "),s("strong",[t._v("导出模块")])]),t._v(" "),s("p",[t._v("NAN模块的初始化是交给 Node.js 提供的宏来实现的：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("NODE_MODULE(addon, init)\n")])])]),s("p",[t._v("而N-API使用自己的宏定义("),s("code",[t._v("NAPI_MODULE")]),t._v(")，因为我们使用"),s("code",[t._v("node-addon-api")]),t._v("，所以它也对这个宏定义包裹成下面这个了：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("NODE_API_MODULE(addon, Init)\n")])])]),s("p",[t._v("编写我们的导出模块 binding.cc")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#include <napi.h>\n#include "list.h"\n\n\nNapi::Object InitAll(Napi::Env env, Napi::Object exports) {\n  return List::Init(env, exports);\n}\n\nNODE_API_MODULE(NODE_GYP_MODULE_NAME, InitAll)\n')])])]),s("h4",{attrs:{id:"改造主逻辑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#改造主逻辑"}},[t._v("#")]),t._v(" "),s("strong",[t._v("改造主逻辑")])]),t._v(" "),s("p",[t._v("做完了上述的准备工作，就可以开始改造我们的主逻辑，转化为 Node Addons ，主要还是因为 Node 无法直接调用 c++， 因此需要经过包装，我们的主要任务就是将 c++ 的类型包装为 v8 的类型，这一部分 node-addon-api 已经封装好，我们直接使用即可。（主要我写的这个比较简单，没有用到特别复杂的特性，主要作为一个小小的实践。）")]),t._v(" "),s("p",[s("strong",[t._v("修改声明文件")])]),t._v(" "),s("p",[t._v("这里主要是对函数的返回值以及入参进行修改。")]),t._v(" "),s("p",[s("strong",[t._v("入参")]),t._v(": "),s("code",[t._v("Napi::CallbackInfo")]),t._v(" 主要为js 调用时传入的请求参数。")]),t._v(" "),s("p",[s("strong",[t._v("返回值")]),t._v(": "),s("code",[t._v("Napi::Value")]),t._v("是 js 值的C ++表示。")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("...\nclass List : public Napi::ObjectWrap<List>{\nprivate:\n    Node *head, *tail;\n    int count = 0;\n    int maxCount = 200;\n    unordered_map <string, string> cachemap;\npublic:\n    static Napi::Object Init(Napi::Env env, Napi::Object exports); // 初始化\n    static Napi::FunctionReference constructor; // 创建 FunctionReference ，防止被垃圾回收\n    List(const Napi::CallbackInfo& info); // 类构造函数\n    void SetMax(const Napi::CallbackInfo& info);\n    Napi::Value getMax(const Napi::CallbackInfo& info);\n    Napi::Value Print(const Napi::CallbackInfo& info);\n    void Insert (const Napi::CallbackInfo& info);\n    Napi::Value Search(const Napi::CallbackInfo& info);\n}\n...\n")])])]),s("p",[s("strong",[t._v("设置缓存长度")])]),t._v(" "),s("p",[t._v("通过对 info 参数来获取 js 传入的参数。增加一些类型判断，如果非数字则想 js 抛出错误。")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('void List::SetMax(const Napi::CallbackInfo& info) {\n    int length = info.Length();\n    Napi::Env env = info.Env();\n     if (length <= 0 || !info[0].IsNumber()) {\n        Napi::TypeError::New(env, "Number expected").ThrowAsJavaScriptException();\n    }\n    Napi::Number value = info[0].As<Napi::Number>();\n    int cvalue = value.Int32Value();\n    if(cvalue < 10) {\n        Napi::TypeError::New(env, "min count is 10").ThrowAsJavaScriptException();\n    }\n    this->maxCount = cvalue;\n}\n')])])]),s("p",[s("strong",[t._v("获取缓存长度")])]),t._v(" "),s("p",[t._v("修改返回值为 "),s("code",[t._v("Napi::Value")]),t._v(" 统一方式。")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Napi::Value List::getMax(const Napi::CallbackInfo& info) {\n    int num = this->maxCount;\n    return Napi::Number::New(info.Env(), num);\n}\n")])])]),s("p",[s("strong",[t._v("打印所有缓存数据")])]),t._v(" "),s("p",[t._v("通过对链表的迭代，获取所有数据并创建 "),s("code",[t._v("Napi::Array")]),t._v(" 来进行存储。最后返回。")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Napi::Value List::Print(const Napi::CallbackInfo& info) {\n    // array https://github.com/nodejs/node-addon-api/issues/423\n    Node *p = this->head;\n    Napi::Array arr = Napi::Array::New(info.Env(), this->count);\n    int i = 0;\n    while(p != NULL) {\n        string key = p->data;\n        unordered_map<string ,string >::iterator l_it;\n        l_it = this->cachemap.find(key);\n\n        if(l_it != this->cachemap.end()) {\n            arr[i] = Napi::String::New(info.Env(), l_it->second);\n        }\n        i++;\n        p = p->next;\n    }\n    return arr;\n}\n")])])]),s("p",[s("strong",[t._v("插入缓存数据")])]),t._v(" "),s("p",[t._v("修改点也比较少，主要就是")]),t._v(" "),s("p",[s("code",[t._v("info[0].As<Napi::String>()")])]),t._v(" "),s("p",[s("code",[t._v("info[1].As<Napi::String>()")])]),t._v(" "),s("p",[t._v("用来获取 js 传入的参数，其他就是正常的数据类型改造。")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('void List::Insert(const Napi::CallbackInfo& info) {\n    int length = info.Length();\n    Napi::Env env = info.Env();\n\n     if (length <= 1 || !info[0].IsString() || !info[1].IsString()) {\n        Napi::TypeError::New(env, "key and value expected").ThrowAsJavaScriptException();\n    }\n    Napi::String key = info[0].As<Napi::String>();\n    Napi::String value = info[1].As<Napi::String>();\n\n    string da = key.ToString();\n\n    if(this->count >= this->maxCount) {\n        this->tail->prev->next = NULL;\n        this->tail = this->tail->prev;\n        \n        Node *p = new Node(da);\n        this->cachemap.insert(std::pair<string, string>(da, value));\n        p->next = this->head;\n        this->head->prev = p;\n        this->head = p;\n        this->head->prev = NULL;\n        \n        return;\n    }\n    if(this->head == NULL) {\n        this->head = this->tail = new Node(da);\n        this->cachemap.insert(std::pair<string, string>(da, value));\n        this->head->next = NULL;\n        this->head->prev = NULL;\n        this->tail->next = NULL;\n        this->tail->prev = NULL;\n    } else {\n        Node *p = new Node(da);\n        this->cachemap.insert(std::pair<string, string>(da, value));\n        this->head->prev = p;\n        p->next = this->head;\n        p->prev = NULL;\n        this->head = p;\n    }\n    this->count++;\n}\n')])])]),s("p",[s("strong",[t._v("获取缓存数据")])]),t._v(" "),s("p",[t._v("获取到 js 传入 "),s("code",[t._v("key")]),t._v(" 的后，通过循环链表查找是否存在改 "),s("code",[t._v("key")]),t._v("值，如果存在就去 map 中获取 "),s("code",[t._v("value")])]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('Napi::Value List::Search(const Napi::CallbackInfo& info) {\n    int length = info.Length();\n    Napi::Env env = info.Env();\n\n     if (length <= 0 || !info[0].IsString()) {\n        Napi::TypeError::New(env, "String expected").ThrowAsJavaScriptException();\n    }\n    Napi::String value = info[0].As<Napi::String>();\n    string da = value.ToString();\n\n    Node *p = this->head;\n    \n    if(p == NULL) {\n        return Napi::String::New(info.Env(), INITVALUE);\n    }\n    \n    int count = -1;\n    int i = 0;\n    \n    while( p!= NULL) {\n        if(p->data == da) {\n            count = i;\n            break;\n        }\n        p = p->next;\n        i ++;\n    }\n    if(count != -1) {\n        p->prev->next = p->next;\n        if(p->next != NULL) {\n            p->next->prev = p->prev;\n        }\n        p->next = this->head;\n        p->prev = NULL;\n        this->head->prev = p;\n        this->head = p;\n        unordered_map<string ,string >::iterator l_it;\n        l_it = this->cachemap.find(da);\n        if(l_it == this->cachemap.end()) {\n            return Napi::String::New(info.Env(), INITVALUE);\n        } else {\n            return Napi::String::New(info.Env(), l_it->second);\n        }\n\n    } else {\n        return Napi::String::New(info.Env(), INITVALUE);\n    }\n    return Napi::String::New(info.Env(), INITVALUE);\n}\n')])])]),s("h2",{attrs:{id:"如何运行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何运行"}},[t._v("#")]),t._v(" 如何运行")]),t._v(" "),s("p",[s("strong",[t._v("打包模式")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("node-gyp configure "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" node-gyp build \n")])])]),s("p",[s("strong",[t._v("调试模式")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("node-gyp configure "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" node-gyp build --debug\n")])])]),s("p",[t._v("通过 "),s("code",[t._v("node-gyp")]),t._v(" 编译后, 会出现对应的  "),s("code",[t._v("build")]),t._v(" 目录，打包模式 "),s("code",[t._v("build")]),t._v(" 下面会有 一个 "),s("code",[t._v("Release")]),t._v(" 目录，调试模式则是 "),s("code",[t._v("Debug")]),t._v(" 目录。")]),t._v(" "),s("p",[s("strong",[t._v("运行测试文件")]),t._v(" "),s("code",[t._v("test.js")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" List "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bindings"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"LRU_node_addon"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("List"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetMax")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"11"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"14"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi3"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"15"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi4"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"16"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"17"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi6"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"18"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi7"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"19"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi8"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"20"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi9"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"21"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi10"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Search")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("output")])]),t._v(" "),s("p",[t._v("由于设置缓存最长长度为10，因为已经查找不到 "),s("code",[t._v('"10"')]),t._v(" 这个 "),s("code",[t._v("key")]),t._v(" 了。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("> \n>[ 'hi10',\n  'hi9',\n  'hi8',\n  'hi7',\n  'hi6',\n  'hi5',\n  'hi4',\n  'hi3',\n  'hi2',\n  'hi1' ]\n")])])]),s("h2",{attrs:{id:"如何调试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何调试"}},[t._v("#")]),t._v(" 如何调试")]),t._v(" "),s("p",[t._v("以下都是基于 "),s("code",[t._v("vscode")]),t._v(" 进行调试。")]),t._v(" "),s("p",[s("strong",[t._v("调试 Node")])]),t._v(" "),s("p",[t._v("创建 "),s("code",[t._v(".vscode/launch.json")]),t._v("， 添加以下配置。"),s("code",[t._v("preLaunchTask")]),t._v(" 为调试前运行的命令，保证每次调试的都是 最近的 c++ 扩展代码。（也可以去除这个文件）")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"request"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"launch"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"JS Debug Build"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"console"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"integratedTerminal"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"program"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${workspaceFolder}/test.js"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"preLaunchTask"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm: build:debug"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("然后打上两个断点，在调试面板 找到 "),s("code",[t._v("JS Debug Build")]),t._v("。单击运行，就可以看到效果了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/24/16f35af65ac04df7?w=2630&h=1760&f=png&s=936689",alt:""}})]),t._v(" "),s("p",[s("strong",[t._v("调试 c++")])]),t._v(" "),s("p",[t._v("vscode 默认不支持 "),s("code",[t._v("c/c++")]),t._v(" 的调试，先安装 "),s("code",[t._v("c/c++")]),t._v(" 插件。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/24/16f35b035a076af0?w=1938&h=924&f=jpeg&s=260246",alt:""}})]),t._v(" "),s("p",[t._v("添加配置")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('{\n        "name": "(lldb) Launch",\n        "type": "cppdbg",\n        "request": "launch",\n        "program": "/Users/huayifeng/.nvm/versions/node/v10.16.0/bin/node",\n        "cwd": "${workspaceFolder}",\n        "args": [\n            "${workspaceFolder}/test.js"\n        ],\n        "MIMode": "lldb",\n},\n')])])]),s("p",[t._v("给 "),s("code",[t._v("list.cc")]),t._v(" 打上断点。在调试面板 找到 "),s("code",[t._v("(lldb) Launch")]),t._v("。单击运行，就可以看到效果了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s3.qiufeng.blue/blog/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2019-12-23-2.png",alt:"屏幕快照-2019-12-23-2.png"}})]),t._v(" "),s("h2",{attrs:{id:"如何发布"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何发布"}},[t._v("#")]),t._v(" 如何发布")]),t._v(" "),s("p",[s("strong",[t._v("包版本管理")])]),t._v(" "),s("p",[t._v("根据语义化版本管理（semantic-version）https://docs.npmjs.com/about-semantic-versioning")]),t._v(" "),s("blockquote",[s("p",[t._v("这里可以看我的另一个包 https://github.com/zerolty/auto-version 帮助你更好地管理版本。")])]),t._v(" "),s("p",[t._v("为了帮助开发人员管理好依赖代码，我们建议你从 "),s("code",[t._v("1.0.0")]),t._v(" 作为初始版本进行迭代。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Code status")]),t._v(" "),s("th",[t._v("Stage")]),t._v(" "),s("th",[t._v("Rule")]),t._v(" "),s("th",[t._v("Example version")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("First release")]),t._v(" "),s("td",[t._v("New product")]),t._v(" "),s("td",[t._v("Start with 1.0.0")]),t._v(" "),s("td",[t._v("1.0.0")])]),t._v(" "),s("tr",[s("td",[t._v("Backward compatible bug fixes")]),t._v(" "),s("td",[t._v("Patch release")]),t._v(" "),s("td",[t._v("Increment the third digit")]),t._v(" "),s("td",[t._v("1.0.1")])]),t._v(" "),s("tr",[s("td",[t._v("Backward compatible new features")]),t._v(" "),s("td",[t._v("Minor release")]),t._v(" "),s("td",[t._v("Increment the middle digit and reset last digit to zero")]),t._v(" "),s("td",[t._v("1.1.0")])]),t._v(" "),s("tr",[s("td",[t._v("Changes that break backward compatibility")]),t._v(" "),s("td",[t._v("Major release")]),t._v(" "),s("td",[t._v("Increment the first digit and reset middle and last digits to zero")]),t._v(" "),s("td",[t._v("2.0.0")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("上述表格摘自 npm ，懒得翻译了。。。")])]),t._v(" "),s("p",[s("strong",[t._v("定义入口")])]),t._v(" "),s("p",[s("code",[t._v("package.json")])]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lru-node-addon"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"version"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0.0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"description"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scripts"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"build:debug"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node-gyp configure && node-gyp build --debug"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"build:release"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node-gyp configure && node-gyp build"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"main"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"index.js"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"files"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"src"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"index.js"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"binding.gyp"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"gypfile"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"dependencies"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"bindings"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"~1.2.1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"node-addon-api"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^1.0.0"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[s("strong",[t._v("发布")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm publish\n")])])]),s("p",[s("img",{attrs:{src:"https://s3.qiufeng.blue/blog/1577073485544.jpg",alt:"1577073485544.jpg"}})]),t._v(" "),s("h2",{attrs:{id:"比较效率"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比较效率"}},[t._v("#")]),t._v(" 比较效率")]),t._v(" "),s("p",[s("strong",[t._v("时间")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("100")]),t._v(" "),s("th",[t._v("1000")]),t._v(" "),s("th",[t._v("10000")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Node")]),t._v(" "),s("td",[t._v("1.828ms")]),t._v(" "),s("td",[t._v("3.264ms")]),t._v(" "),s("td",[t._v("42.393ms")])]),t._v(" "),s("tr",[s("td",[t._v("Addon")]),t._v(" "),s("td",[t._v("0.605ms")]),t._v(" "),s("td",[t._v("5.953ms")]),t._v(" "),s("td",[t._v("525.639ms")])])])]),t._v(" "),s("p",[s("strong",[t._v("内存使用（heapUsed）")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("100")]),t._v(" "),s("th",[t._v("1000")]),t._v(" "),s("th",[t._v("10000")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Node")]),t._v(" "),s("td",[t._v("3.96MB")]),t._v(" "),s("td",[t._v("4.46MB")]),t._v(" "),s("td",[t._v("6.72MB")])]),t._v(" "),s("tr",[s("td",[t._v("Addon")]),t._v(" "),s("td",[t._v("3.90MB")]),t._v(" "),s("td",[t._v("4.23MB")]),t._v(" "),s("td",[t._v("5.45MB")])])])]),t._v(" "),s("p",[t._v("测试发现随着数量的增加。用原生的 node 速度更快一些，但是内存占用更多。。 。这个回头再写一篇研究一下。还没有具体分析。。。")]),t._v(" "),s("p",[s("strong",[t._v("以上所有示例的 github 地址")])]),t._v(" "),s("p",[t._v("https://github.com/hua1995116/LRU-node-addon")]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("p",[t._v("https://juejin.im/post/5de484bef265da05ef59feb5")]),t._v(" "),s("p",[t._v("https://www.jianshu.com/p/b1ab4a170c3c")]),t._v(" "),s("p",[t._v("https://cnodejs.org/topic/5957626dacfce9295ba072e0")]),t._v(" "),s("p",[t._v("https://github.com/nodejs/node-addon-api")]),t._v(" "),s("p",[t._v("https://gyp.gsrc.io/docs/UserDocumentation.md")]),t._v(" "),s("p",[t._v("https://www.ibm.com/developerworks/cn/opensource/os-cn-v8engine/")]),t._v(" "),s("p",[t._v("https://nodejs.org/dist/latest/docs/api/n-api.html")]),t._v(" "),s("h2",{attrs:{id:"欢迎关注公众号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#欢迎关注公众号"}},[t._v("#")]),t._v(" 欢迎关注公众号")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s3.qiufeng.blue/blog/gongzhonghao.png",alt:""}})])])}),[],!1,null,null,null);n.default=e.exports}}]);