(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{416:function(e,s,l){"use strict";l.r(s);var t=l(44),o=Object(t.a)({},(function(){var e=this,s=e.$createElement,l=e._self._c||s;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h1",{attrs:{id:"听说你还不知道promise的allsettled-和all-的区别"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#听说你还不知道promise的allsettled-和all-的区别"}},[e._v("#")]),e._v(" 听说你还不知道Promise的allSettled()和all()的区别？")]),e._v(" "),l("blockquote",[l("p",[e._v("译文来自 https://dev.to/viclafouch/promise-allsettled-vs-promise-all-in-javascript-4mle")]),e._v(" "),l("p",[e._v("原作者 Victor de la Fouchardière")]),e._v(" "),l("p",[e._v("译者: 蓝色的秋风(github/hua1995116)")])]),e._v(" "),l("p",[e._v("Hello! 🧑‍🌾")]),e._v(" "),l("p",[e._v("从 ES2015 起, promises 的出现，让我们简化了异步操作。（所以 promise 越来越流行，掌握它的相关 API 变得至关重要）。")]),e._v(" "),l("p",[e._v("让我们来看看以下两个 Promise 方式及他们差异：")]),e._v(" "),l("ul",[l("li",[l("p",[l("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise.allSettled(可迭代)"),l("OutboundLink")],1)])]),e._v(" "),l("li",[l("p",[l("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise.all(可迭代)"),l("OutboundLink")],1)])])]),e._v(" "),l("p",[e._v("他们两个都传入可 "),l("code",[e._v("迭代对象")]),e._v("，并返回一个已完成的 Promises 的"),l("code",[e._v("数组")]),e._v("。")]),e._v(" "),l("p",[e._v("❓那么，"),l("strong",[e._v("它们之间有什么区别呢？")])]),e._v(" "),l("h2",{attrs:{id:"promise-all-🧠"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#promise-all-🧠"}},[e._v("#")]),e._v(" Promise.all()🧠")]),e._v(" "),l("p",[l("code",[e._v("Promise.all()")]),e._v("方法将一组可迭代的 Promises 作为输入，并返回一个 Promise ，该 Promise resolve 的结果为刚才那组 输入 promises 的返回结果。")]),e._v(" "),l("p",[l("img",{attrs:{src:"https://res.cloudinary.com/practicaldev/image/fetch/s--A7rnVVpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/loq7cd72u055wl92yq2u.png",alt:"Promise all"}})]),e._v(" "),l("p",[e._v("正如你看到的那样，我们将数组传递给 "),l("code",[e._v("Promise.all")]),e._v("。 当三个 promise 都完成时，"),l("code",[e._v("Promise.all")]),e._v(" 就完成了，并且输出被打印了。")]),e._v(" "),l("p",[e._v("现在，让我们看看其中一个 promise 失败了的情况，如果这个 promise 失败了，又会 输出什么呢？ 🛑")]),e._v(" "),l("p",[l("img",{attrs:{src:"https://res.cloudinary.com/practicaldev/image/fetch/s--MEAe2zoD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gcpmjldpgbfc8xgqgh10.png",alt:"Promise all failed"}})]),e._v(" "),l("p",[l("code",[e._v("如果其中一个 promise 失败了")]),e._v("，则 "),l("code",[e._v("Promise.all")]),e._v(" 整体将会失败。 例如，我们传递2个 promise, 一个完成的 promise 和 一个 失败的promise，那么 "),l("code",[e._v("Promise.all")]),e._v(" 将立即失败。")]),e._v(" "),l("h2",{attrs:{id:"promise-allsettled-📪"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#promise-allsettled-📪"}},[e._v("#")]),e._v(" Promise.allSettled()📪")]),e._v(" "),l("p",[e._v("从 ES2020 开始，你可以使用 "),l("code",[e._v("Promise.allSettled")]),e._v("。当所有的 promises 都已经结束无论是完成状态或者是失败状态，它都会返回一个 promise，这个 promise 将会包含一个关于描述每个 promise 状态结果的对象数组。")]),e._v(" "),l("p",[e._v("对于每个结果对象，都有一个"),l("code",[e._v("状态")]),e._v("字符串：")]),e._v(" "),l("ul",[l("li",[l("p",[l("code",[e._v("fulfilled(完成)")]),e._v(" ✅")])]),e._v(" "),l("li",[l("p",[l("code",[e._v("rejected(失败)")]),e._v(" ❌")])])]),e._v(" "),l("p",[e._v("返回值（或原因）表现每个 promise 的完成（或失败）。")]),e._v(" "),l("p",[e._v("仔细观察结果数组的以下属性（"),l("code",[e._v("status-状态")]),e._v("，"),l("code",[e._v("value-值")]),e._v("，"),l("code",[e._v("reason-原因")]),e._v("）。")]),e._v(" "),l("p",[l("img",{attrs:{src:"https://res.cloudinary.com/practicaldev/image/fetch/s--s2PC5oqi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/brvijnemnpmm9qvauhvp.png",alt:"allSettled"}})]),e._v(" "),l("h2",{attrs:{id:"区别👬"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#区别👬"}},[e._v("#")]),e._v(" 区别👬")]),e._v(" "),l("ul",[l("li",[l("p",[l("code",[e._v("Promise.all")]),e._v(" 将在 Promises 数组中的其中一个 Promises 失败后立即失败。")])]),e._v(" "),l("li",[l("p",[l("code",[e._v("Promise.allSettled")]),e._v("将永远不会失败，一旦数组中的所有 Promises 被完成或失败，它就会完成。")])])]),e._v(" "),l("h2",{attrs:{id:"浏览器支持-🚸"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#浏览器支持-🚸"}},[e._v("#")]),e._v(" 浏览器支持 🚸")]),e._v(" "),l("p",[e._v("下面列出了"),l("code",[e._v("Promise.allSettled()")]),e._v("和"),l("code",[e._v("promise.all()")]),e._v("方法浏览器的支持情况:")]),e._v(" "),l("p",[l("code",[e._v("Promise.allSettled()")])]),e._v(" "),l("p",[l("img",{attrs:{src:"https://s3.qiufeng.blue/blog/image-20200819004559123.png",alt:"image-20200819004559123"}})]),e._v(" "),l("p",[l("code",[e._v("promise.all()")])]),e._v(" "),l("p",[l("img",{attrs:{src:"https://s3.qiufeng.blue/blog/image-20200819004619627.png",alt:"image-20200819004619627"}})])])}),[],!1,null,null,null);s.default=o.exports}}]);